<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="PixelStreamClass" Id="{52003b82-8258-4495-b62a-bb1a21c09db0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PixelStreamClass EXTENDS FB_ComponentBase
VAR
	_PixelWriter: ITF_PixelWritter;
	_Video: ITF_Video;
	State: INT;
	Play: BOOL;
	currentFrame: ARRAY[0..255] OF UDINT;
	NewCommand: ExtendedCommand;
	FrameTimeDelay: TON := (PT := TIME#100MS);
	_IndexOffset : USINT;
	SegmentCount: INT;
	_frameSize : INT := 16;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CyclicLogic" Id="{8483b856-488d-48c2-948e-9f25ec90c2f7}">
      <Declaration><![CDATA[METHOD CyclicLogic
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.CyclicLogic();

CASE State OF
	0:
		IF Play THEN
			State := 1;
		END_IF
	1:
	    currentFrame :=	_Video.GetNextFrame();
		NewCommand.Index := 0 + _IndexOffset;
		State := 2;
	2:
		CASE SegmentCount OF 
			0,1,4,5,8,9,12,13,16,17,20,21,24,25,28,29:
				NewCommand.Segment[0] := currentFrame[SegmentCount* 8 + 0];
				NewCommand.Segment[1] := currentFrame[SegmentCount* 8 + 1];
				NewCommand.Segment[2] := currentFrame[SegmentCount* 8 + 2];
				NewCommand.Segment[3] := currentFrame[SegmentCount* 8 + 3];
				NewCommand.Segment[4] := currentFrame[SegmentCount* 8 + 4];
				NewCommand.Segment[5] := currentFrame[SegmentCount* 8 + 5];
				NewCommand.Segment[6] := currentFrame[SegmentCount* 8 + 6];
				NewCommand.Segment[7] := currentFrame[SegmentCount* 8 + 7];
			2,6,10,14,18,22,26,30:                    
				NewCommand.Segment[7] := currentFrame[(SegmentCount + 1) * 8 + 0];
				NewCommand.Segment[6] := currentFrame[(SegmentCount + 1) * 8 + 1];
				NewCommand.Segment[5] := currentFrame[(SegmentCount + 1) * 8 + 2];
				NewCommand.Segment[4] := currentFrame[(SegmentCount + 1) * 8 + 3];
				NewCommand.Segment[3] := currentFrame[(SegmentCount + 1) * 8 + 4];
				NewCommand.Segment[2] := currentFrame[(SegmentCount + 1) * 8 + 5];
				NewCommand.Segment[1] := currentFrame[(SegmentCount + 1) * 8 + 6];
				NewCommand.Segment[0] := currentFrame[(SegmentCount + 1) * 8 + 7];
			3,7,11,15,19,23,27,31:                    
				NewCommand.Segment[7] := currentFrame[(SegmentCount - 1) * 8 + 0];
				NewCommand.Segment[6] := currentFrame[(SegmentCount - 1) * 8 + 1];
				NewCommand.Segment[5] := currentFrame[(SegmentCount - 1) * 8 + 2];
				NewCommand.Segment[4] := currentFrame[(SegmentCount - 1) * 8 + 3];
				NewCommand.Segment[3] := currentFrame[(SegmentCount - 1) * 8 + 4];
				NewCommand.Segment[2] := currentFrame[(SegmentCount - 1) * 8 + 5];
				NewCommand.Segment[1] := currentFrame[(SegmentCount - 1) * 8 + 6];
				NewCommand.Segment[0] := currentFrame[(SegmentCount - 1) * 8 + 7];
		END_CASE
		
		State := 3;
	3:
		IF _PixelWriter.SendExtCommand(NewCommand := NewCommand) THEN
			NewCommand.Index := NewCommand.Index + 1;
			SegmentCount := SegmentCount + 1;
			IF SegmentCount = 32 THEN
				SegmentCount := 0;
				State := 4;
			ELSE
				State := 2;
			END_IF
		END_IF
		
	4:
		IF _frameSize = 32 THEN
			_IndexOffset := _IndexOffset + 32;
			IF _IndexOffset = 128 THEN
				_IndexOffset := 0;
				State := 5;
			ELSE
				State := 1;
			END_IF
		ELSE
			State := 5;
		END_IF
	5:
		IF _PixelWriter.ForwardExtCommandToFrame() THEN
			//FrameTimeDelay.IN := TRUE;
			//State := 6;
			State := 0;
		END_IF
	
	6:
		IF FrameTimeDelay.Q THEN
			FrameTimeDelay.IN := FALSE;
			State := 0;
		END_IF
END_CASE

FrameTimeDelay();]]></ST>
      </Implementation>
    </Method>
    <Property Name="IndexOffset" Id="{d0c28ba8-da67-4137-9cf1-f77c6b9c0106}">
      <Declaration><![CDATA[PROPERTY IndexOffset : UsINT]]></Declaration>
      <Get Name="Get" Id="{06962150-40b1-4117-a4ae-062e12ec785d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IndexOffset := _IndexOffset;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{5f72f415-0afa-4cfd-9e67-d2cdfe035009}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF IndexOffset = 32 OR IndexOffset = 64 OR IndexOffset = 96 OR IndexOffset = 128 OR IndexOffset = 160 OR IndexOffset = 192 THEN
	_IndexOffset := IndexOffset;
END_IF
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="PlayVideo" Id="{d54ec6bb-a443-4ceb-a30a-7d3b0fd71f1d}">
      <Declaration><![CDATA[METHOD PlayVideo : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Play := PlayVideo := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterAVideo" Id="{e51d5207-075f-45eb-90a1-b48bf08225e3}">
      <Declaration><![CDATA[METHOD RegisterAVideo : BOOL
VAR_INPUT
	MyVideo: ITF_Video;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _Video = 0 THEN
	_Video := MyVideo;
	RegisterAVideo := true;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterMyPixelArray" Id="{6a2cd104-bcf0-430b-9cf0-752a82df05a1}">
      <Declaration><![CDATA[METHOD RegisterMyPixelArray : BOOL
VAR_INPUT
	MYPixelWritter: ITF_PixelWritter;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _PixelWriter = 0 THEN
	_PixelWriter := MYPixelWritter;
	RegisterMyPixelArray := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="StopVideo" Id="{7615fb28-a976-484a-ba91-7eadb24622de}">
      <Declaration><![CDATA[METHOD StopVideo : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Play := FALSE;
StopVideo := TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="PixelStreamClass">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="PixelStreamClass.CyclicLogic">
      <LineId Id="72" Count="0" />
      <LineId Id="6" Count="3" />
      <LineId Id="78" Count="0" />
      <LineId Id="11" Count="2" />
      <LineId Id="74" Count="0" />
      <LineId Id="14" Count="35" />
      <LineId Id="75" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="5" />
      <LineId Id="86" Count="3" />
      <LineId Id="95" Count="2" />
      <LineId Id="90" Count="0" />
      <LineId Id="93" Count="1" />
      <LineId Id="85" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="59" Count="2" />
      <LineId Id="98" Count="0" />
      <LineId Id="62" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="PixelStreamClass.IndexOffset.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="PixelStreamClass.IndexOffset.Set">
      <LineId Id="5" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="PixelStreamClass.PlayVideo">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="PixelStreamClass.RegisterAVideo">
      <LineId Id="3" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="PixelStreamClass.RegisterMyPixelArray">
      <LineId Id="3" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="PixelStreamClass.StopVideo">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>